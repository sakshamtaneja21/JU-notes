A()
{
	int i;
	for(i=1 to n)
		PF("Lalit Matoliya");
}

Complexity of this Algorithm: O(n)

A()
{
	int i, j;
	for(i=1 to n)
	{
		for(j=1 to n)
			PF("Lalit Matoliya");
	}
}
Complexity of this Algorithm: O(n^2)

A()
{
	int i, j, k;
	for(i=1 to n)
	{
		for(j=1 to n)
		{
			for(k=1 to n)
				PF("Lalit Matoliya");
		}
	}
}
Complexity of this Algorithm: O(n^3)

A()
{
	i=1, s=1;
	while(s<=n)
	{
		i++;	// i gets incremented linearly
		s = s + i;    // but S value depends upon i
		PF("Lalit Matoliya");
	}
}

S:	1	3	6	10	15	21	28	n
I:	1	2	3	4	5	6	7	k

S value is the sum of the natural number
	s = 1 + 2 + 3 + 4 + 5 + ............ + n
	k(k+1)/2 > n
	(k^2 + k)/2 > n
	Order we have to maximum
	k^2 > n
	k = sqrt(n)

	O(sqrt(n))

A()
{
	int i, j, k, n;
	for(i=1; i<=n; i++)
	{
		for(j=1; j<=i; j++) // Dependent Loop
		{
			for(k=1; k<=100; k++) // Independent Loop
			{
				PF("Lalit Matoliya");
			}
		}
	}
}

Step-I
-----------
i = 1;
j = 1 time
k = 100 times

Step-II
-----------
i = 2
j = 2 times
k = 2 x 100 times = 200 times

Step-III
------------
i = 3
j = 3 times
k = 3 x 100 times = 300 times

Step-n
-----------
i = n
j = n times
k = n x 100 times

=> 100 + 2 x 100 + 3 x 100 + 4 x 100 + .........+ n x 100
=> 100(1 + 2 + 3 + 4 + 5 + .....+ n)
=> 100[n * (n +1)/2]
=> (n^2 + n)/2
=> O(n^2)

A()
{
	int i, j, k, n;
	for(i=1; i<=n; i++)	// n times
	{
		for(j=1; j<=i^2; j++) // dependent loop: on i it depends
		{
			for(k=1; k<=n/2; k++)  // Indendent loop
			{
				PF("Lalit Matoliya");
			}
		}
	}
}

Step-1
-----------
i = 1
j = 1 time
k = n/2 x 1

Step-2
-----------
i = 2
j = 4 times
k = n/2 x 4

Step-3
-----------
i=3
j = 9 times
k = n/2 x 9

Step-n
-----------
i = n
j = n^2 times
k  = n/2 *n^2

=> n/2x1 + n/2x4 + n/2x9 + ..........+n/2xn^2
=>n/2[1 + 4 + 9 + 16 + .......+ n^2]
=>n/2[n(n+1)(2n+1)/6]
=> O(n^4)

A()
{
	for(i=1; i<n; i = i * 2)		// Increment is not linear, it is multiplied by 2
		PF("Lalit Matoliya");
}

A()
{
	int i, j, k;
	for(i=n/2; i<=n; i++)    // n/2 times
	{
		for(j=1; j<=n/2; j++)  // n/2 times
		{
			for(k=1; k<=n; k=k*2)  // logn
				PF("Lalit Matoliya");
		}
	}
}

A()
{
	int i, j, k;
	for(i=n/2; i<=n; i++)  // n/2 times
	{
		for(j=1; j<=n; j = 2 * j)
		{
			for(k=1; k<=n; k = k *2)
				PF("Lalit Matoliya");
		}
	}
}
































